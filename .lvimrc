function! BuildReactNativeForAndroid(release_version)
    if(a:release_version == "")
        return
    endif

    let build_dir = "app/build/outputs/apk/"
    let release_dir = "ReleaseBuilds/"

    " Substitute 1.2.3 -> 1-2-3 for compatible filenames
    let sanitized_release_version = substitute(a:release_version, '\.', '-', 'g')

    let apk_name = "Bevegram-" . sanitized_release_version . ".apk"

    let install_cmd = ""
    if confirm("Install apk on device?", "&Yes\n&No\n") == 1
        let install_cmd = "adb uninstall com.bevegram && adb install " . release_dir . apk_name
    endif

    echo "Building Bevegram " . a:release_version . " android apk..."
    exe ":Term cd android && ./gradlew assembleRelease && sleep 1 && cp " . build_dir . "app-release.apk " . release_dir . apk_name . " && " . install_cmd
    exe "startinsert"
    if confirm("Open release folder? ", "&Yes\n&No") == 1
        call system("open android/" . release_dir)
    endif
endfunction

function! GetPackageVersion()
    let version_file = "package.json"
    for line in readfile(version_file)
        if line =~ '"version"'
            " Match semver version number ex (1.14.21 or 0.0.2)
            return matchstr(line, '\d\+.\d\+.\d\+')
        endif
    endfor
    echoerr "Could not parse version number from '" . version_file . "'"
    return ""
endfunction

function! BuildReactNative()
    let build_platform = confirm("Build for which platform: ", "&Android\n&iOS")

    " Android
    if build_platform == 1
        echo "\n"
        call BuildReactNativeForAndroid(GetPackageVersion())
    elseif
        echo "Invalid build choice!"
    endif
endfunction

function! RestartAndroidApp()
    let package = "com.bevegram"
    let activity = "MainActivity"
    let stop_cmd = "adb shell am force-stop " . package
    let start_cmd = "adb shell am start -n " . package . "/." . activity
    echo "Restarting " . package . "..."
    exe "Term " . stop_cmd . " && " . start_cmd
endfunction

function! RunJsTests()
    let l:test_cmd = "npm test"
    exe "Term " . l:test_cmd
    exe "startinsert"
    exe "winc p"
    call feedkeys("\<Esc>")
endfunction

function! EditTest(subdir)
    let current_file = expand("%:t:r")
    exe "vs __tests__/" . a:subdir . "/" . current_file . "-test.js"
endfunction

function! RestartYcmServers()
    exec "YcmCompleter RestartServer"
    sleep 2
    exec "YcmRestartServer"
endfunction

function! EchoInput(...)
  echo join(a:000[1], " ")
endfunction

let g:tsc_build_error = []
function! SaveError(...)
  call add(g:tsc_build_error, join(a:000[1], " "))
endfunction

function! IncrementalCompile()
  call jobstart("gulp incremental-tsc", {'on_exit': function("AfterTscCompile")})
endfunction

function! AfterTscCompile(...)
  echo "Typescript compile successful!"
  call ServerJobStart()
endfunction

let g:building_server = 0
function! ServerJobStart()
  if !g:building_server
    let g:building_server = 1
    echo "Building Server..."
    let serverBuildCommand = "npm run-script buildServer"
    call jobstart(serverBuildCommand, {'on_exit': function('AfterServerBuild'), 'on_stderr': function('SaveError')})
  endif
endfunction

function! AfterServerBuild(...)
  if len(g:tsc_build_error) > 0
    echoerr "Server Build Failed!"
    echo join(g:tsc_build_error, "\n")
    let g:tsc_build_error = []
  else
    echo "Server Build Complete!"
  endif
  let g:building_server = 0
endfunction

function! ShowErrorsIfNecessary()
  " Show Errors based on their importance
  " Ycm (loclist) errors are shows if they exist
  " tslint (ale -> quickfix) are shown if they exist
  let ycm_errors = youcompleteme#GetErrorCount()
  if ycm_errors > 0
    exe "YcmDiags"
    redraw
    echo printf("TSC: %s Error%s Found!", ycm_errors, ycm_errors == 1 ? "" : "s")
  else
    execute "lclose"
  endif

  if ale#statusline#Status() != "OK" && ycm_errors == 0
    execute "copen"
  else
    execute "cclose"
  end
endfunction

function! OnTypescriptSave()
  call ShowErrorsIfNecessary()
  call IncrementalCompile()
endfunction

augroup ts_config
  au!
  au FileType javascript,typescript set shiftwidth=2 tabstop=2

  au BufWritePost *.ts,*.tsx call jobstart("ctags src -R")
  autocmd BufWritePost *.ts,*.tsx call OnTypescriptSave()

  au FileType typescript setlocal makeprg=gulp\ --silent\ incremental-tsc
  au FileType typescript setlocal errorformat=%+A\ %#%f\ %#(%l\\\,%c):\ %m,%C%m
augroup END

" Compile
nnoremap <silent> cp :call BuildReactNative()<CR>
" Compile Open
nnoremap <silent> co :call RestartAndroidApp()<CR>
" Compile Latest
nnoremap <silent> cl :call BuildReactNativeForAndroid('Latest')<CR>
" Make tests
nnoremap <silent> mt :call RunJsTests()<CR>
" Make reload
nnoremap <silent> mr :Term react-native run-android<CR>
" Edit test
nnoremap <silent> <Leader>ct :call EditTest("components")<CR>
" Kill test
nnoremap <silent> mk :bd! *term*test*<CR>
" Make an'd'roid test
nnoremap <silent> md :Term cd android && ./gradlew connectedAndroidTest<CR>
" Goto Definition
nnoremap <silent> gd :YcmCompleter GoToDefinition<CR>
nnoremap <silent> gds :vs <bar> YcmCompleter GoToDefinition <bar> winc w<CR>
nnoremap <silent> gt :YcmCompleter GetType<CR>
nnoremap <silent> gm :YcmCompleter GetDoc<CR>
nnoremap gr :call RestartYcmServers()<CR>
