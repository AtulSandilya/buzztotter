function! RunJsTests()
    let l:test_cmd = 'npm test'
    exe 'Term ' . l:test_cmd
    " exe 'startinsert'
    " exe 'winc p'
    " call feedkeys('\<Esc>')
endfunction

function! EditTest(subdir)
    let l:current_file = expand('%:t:r')
    exe 'vs __tests__/' . a:subdir . '/' . l:current_file . '-test.js'
endfunction

function! RestartYcmServers()
    exec 'YcmCompleter RestartServer'
    sleep 2
    exec 'YcmRestartServer'
endfunction

function! EchoInput(...)
  echo join(a:000[1], ' ')
endfunction

let g:tsc_build_error = []
function! SaveError(...)
  call add(g:tsc_build_error, join(a:000[1], ' '))
endfunction

function! IncrementalCompile()
  call jobstart('gulp incremental-tsc', {'on_exit': function('AfterTscCompile')})
endfunction

function! AfterTscCompile(...)
  echo 'Typescript compile successful!'
  call ServerJobStart()
endfunction

let g:building_server = 0
function! ServerJobStart()
  if !g:building_server
    let g:building_server = 1
    echo 'Building Server...'
    let l:serverBuildCommand = 'npm run-script buildServer'
    call jobstart(l:serverBuildCommand, {'on_exit': function('AfterServerBuild'), 'on_stderr': function('SaveError')})
  endif
endfunction

function! AfterServerBuild(...)
  if len(g:tsc_build_error) > 0
    echoerr 'Server Build Failed!'
    echo join(g:tsc_build_error, '\n')
    let g:tsc_build_error = []
  else
    echo 'Server Build Complete!'
  endif
  let g:building_server = 0
endfunction

function! TsLint()
  let l:current_file = bufname('%')
  call system('tslint --fix ' . l:current_file)
  exe 'edit'
endfunction
command! TsLint call TsLint()

function! ShowErrorsIfNecessary()
  " Show Errors based on their importance
  " Ycm (loclist) errors are shows if they exist
  " tslint (ale -> quickfix) are shown if they exist
  let l:ycm_errors = youcompleteme#GetErrorCount()
  if l:ycm_errors > 0
    exe 'YcmDiags'
    redraw
    echo printf('TSC: %s Error%s Found!', l:ycm_errors, l:ycm_errors == 1 ? '' : 's')
  else
    execute 'lclose'
  endif

  if ale#statusline#Status() !=# 'OK' && l:ycm_errors == 0
    execute 'copen'
  else
    execute 'cclose'
  end
endfunction

function! OnTypescriptSave()
  call ShowErrorsIfNecessary()
  call IncrementalCompile()
endfunction

function! EnableTypescriptLinting()
  let g:ale_fix_on_save=1
  let g:ale_javascript_prettier_options = '--trailing-comma all'
  " This is relatively slow, but only runs on save
  " let g:ale_typescript_tslint_fix_options = printf('--format verbose --type-check --project '%s/tsconfig.json'', getcwd())
  let g:ale_typescript_tslint_fix_options = '--format verbose'
  let g:ale_typescript_tslint_options = '--format verbose'
  " augroup ts_linting
  "   au!
  "   au InsertEnter *.ts,*.tsx let g:ale_typescript_tslint_options = '--format verbose'
  "   au InsertLeave *.ts,*.tsx let g:ale_typescript_tslint_options = printf('--format verbose --type-check --project '%s/tsconfig.json'', getcwd())
  " augroup END
endfunction

augroup ts_config
  au!
  au FileType javascript,typescript set shiftwidth=2 tabstop=2
  au FileType typescript call EnableTypescriptLinting()

  au BufWritePost *.ts,*.tsx call jobstart('ctags src -R')
  autocmd BufWritePost *.ts,*.tsx call OnTypescriptSave()

  au FileType typescript setlocal makeprg=tsc
  au FileType typescript setlocal errorformat=%+A\ %#%f\ %#(%l\\\,%c):\ %m,%C%m
augroup END

" Make tests
nnoremap <silent> mt :call RunJsTests()<CR>
" Make reload
nnoremap <silent> mr :Term react-native run-android<CR>
" Edit test
nnoremap <silent> <Leader>ct :call EditTest('components')<CR>
" Kill test
nnoremap <silent> mk :bd! *term*test*<CR>
" Make an'd'roid test
nnoremap <silent> md :Term cd android && ./gradlew connectedAndroidTest<CR>
" Goto Definition
nnoremap <silent> gd :YcmCompleter GoToDefinition<CR>
nnoremap <silent> gds :vs <bar> YcmCompleter GoToDefinition <bar> winc w<CR>
nnoremap <silent> gt :YcmCompleter GetType<CR>
nnoremap <silent> gm :YcmCompleter GetDoc<CR>
nnoremap gr :call RestartYcmServers()<CR>
" Faster global search
nnoremap g* :Ag <C-r><C-w><CR>
